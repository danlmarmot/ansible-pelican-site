---
# tasks file for bootstrap

- name: Starting bootstrap role
  debug:
    msg: "{{ lookup('pipe','date') }}"

# Look for the shared_folder variable for Vagrant-based installs
- name: Look for Vagrant shared folder
  stat: path=/home/vagrant/shared/installers/
  register: shared_folder

#######
#  Debian package installs and configuration.
#  Some of this may also apply to RHEL distros
#######

- name: Update apt-cache if older than two hours, and apt dist-upgrade (Debian)
  apt:
    update_cache: yes
    cache_valid_time: 7200
    upgrade: dist
  when: ansible_os_family == 'Debian'

- name: Install default packages (Debian)
  apt: pkg={{ item }} state=installed
  with_items:
    - openssh-server
    - fail2ban
    - unattended-upgrades
    - logwatch
    - mailutils
    - tree
  when: ansible_os_family == 'Debian'

- name: Set unattended-upgrades to install from $ubuntu_release-security
  lineinfile:
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: "$ubuntu_release-updates"
    state: absent

- name: Set apt update intervals
  copy:
    src: apt_periodic.txt
    dest: /etc/apt/apt.conf.d/10periodic

#----------------------------------------------------------
# Add users

- name: Add site admin user
  user:
    name: "{{ site_admin_user }}"
    password: "{{ site_admin_password }}"

- name: Add site admin ssh key
  authorized_key:
    user: "{{ site_admin_user }}"
    key: "{{ lookup('file', site_admin_ssh_keypath ) }}"
    manage_dir: yes

- name: Add site admin user to sudoers
  lineinfile:
    dest: /etc/sudoers
    regexp: "{{ site_admin_user }} ALL"
    line: "{{ site_admin_user }} ALL=(ALL) NOPASSWD:ALL"
    state: present

#----------------------------------------------------------
# Adjust sudoers

- name: Remove sudo group rights (Debian)
  lineinfile:
    dest: /etc/sudoers
    regexp: "^%sudo"
    state: absent

#----------------------------------------------------------
# Adjust sudoers

- name: Disable root ssh access
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^PermitRootLogin"
    line: "PermitRootLogin no"
    state: present
  notify: restart sshd (handler)

- name: Disable password authentication
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^PasswordAuthentication"
    line: "PasswordAuthentication no"
    state: present
  notify: restart sshd (handler)

- name: Change ssh port
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^Port"
    line: "Port {{ sshd_port }}"
    state: present
  notify: restart sshd (handler)

#----------------------------------------------------------
# Include ufw
- include: enable_ufw.yml
  when: enable_ufw

#----------------------------------------------------------
# Configure Postfix

- name: Add Gmail for SMTP relay in Postfix
  template:
    src: postfix-main.cf.j2
    dest: /etc/postfix/main.cf
    mode: 0644

- name: Add Gmail credentials
  template:
    src: postfix-sasl_passwd.j2
    dest: /etc/postfix/sasl_passwd
  notify: Restart Postfix (handler)

# This always reports a change, don't need to restart postfix needlessly
- name: Create the local sasl_passwd files
  command: postmap /etc/postfix/sasl_passwd
  changed_when: false

- name: Ensure postfix user owns /etc/sasl_passwd files
  file:
    path: "/etc/postfix/{{ item }}"
    owner: postfix
  with_items:
    - sasl_passwd
    - sasl_passwd.db
  notify: Restart Postfix (handler)

- name: Redirect root email to site_admin_email
  lineinfile:
    dest: /etc/aliases
    line: "root: {{ site_admin_email }}"
    state: present
  notify: Register new Postfix alias (handler)

#----------------------------------------------------------
# Configure logwatch

- name: Ensure logwatch cache directory is present
  file:
    path: /var/cache/logwatch
    state: directory

#- name: Setup logwatch to mail daily
#  lineinfile:
#    dest: /etc/cron.daily/00logwatch
#    regexp: "^/usr/sbin/logwatch"
#    line: "/usr/sbin/logwatch --output mail --mailto {{ site_admin_email }} --detail high"
#    state: present
#    create: yes

- name: Add cron.d job for daily logwatch reports
  cron:
    name: logwatch_daily
    cron_file: logwatch_daily
    special_time: daily
    job: '/usr/sbin/logwatch --output mail --mailto {{ site_admin_email }} --detail high'
    user: root
    state: present


- name: Finished with bootstrap role
  debug:
    msg: "{{ lookup('pipe','date') }}"